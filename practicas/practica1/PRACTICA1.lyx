#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extreport
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\headheight 3cm
\headsep 3cm
\footskip 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language={C++},keywordstyle={\color{blue}},stringstyle={\color{red}},commentstyle={\color{magenta}},morecomment={[l][\color{blue}]{\#}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Estructura de datos.
 Práctica 1: Informe de eficiencia.
\end_layout

\begin_layout Author
Francisco Navarro Morales
\end_layout

\begin_layout Chapter*
Hardware utilizado y Sistema Operativo.
\end_layout

\begin_layout Standard
Sudo lscpu:
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Architecture: x86_64
\end_layout

\begin_layout Plain Layout
CPU op-mode(s): 32-bit, 64-bit
\end_layout

\begin_layout Plain Layout
Byte Order: Little Endian
\end_layout

\begin_layout Plain Layout
CPU(s): 8
\end_layout

\begin_layout Plain Layout
On-line CPU(s) list: 0-7
\end_layout

\begin_layout Plain Layout
Thread(s) per core: 2
\end_layout

\begin_layout Plain Layout
Core(s) per socket: 4
\end_layout

\begin_layout Plain Layout
Socket(s): 1
\end_layout

\begin_layout Plain Layout
NUMA node(s): 1
\end_layout

\begin_layout Plain Layout
Vendor ID: GenuineIntel
\end_layout

\begin_layout Plain Layout
CPU family: 6
\end_layout

\begin_layout Plain Layout
Model: 60
\end_layout

\begin_layout Plain Layout
Model name: Intel(R) Core(TM) i7-4712MQ CPU @ 2.30GHz
\end_layout

\begin_layout Plain Layout
Stepping: 3
\end_layout

\begin_layout Plain Layout
CPU MHz: 2301.000
\end_layout

\begin_layout Plain Layout
CPU max MHz: 2301.0000
\end_layout

\begin_layout Plain Layout
CPU min MHz: 800.0000
\end_layout

\begin_layout Plain Layout
BogoMIPS: 4589.37
\end_layout

\begin_layout Plain Layout
Virtualization: VT-x
\end_layout

\begin_layout Plain Layout
L1d cache: 32K
\end_layout

\begin_layout Plain Layout
L1i cache: 32K
\end_layout

\begin_layout Plain Layout
L2 cache: 256K
\end_layout

\begin_layout Plain Layout
L3 cache: 6144K
\end_layout

\begin_layout Plain Layout
NUMA node0 CPU(s): 0-7
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/pinguino/UGR/segundo/1/ED/practicas/so.png
	lyxscale 10
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Información sobre el sistema operativo
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Compilador:
\end_layout

\begin_layout Standard
gcc -v : 
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Using built-in specs.
 
\end_layout

\begin_layout Plain Layout
COLLECT_GCC=/usr/x86_64-pc-linux-gnu/gcc-bin/4.9.3/gcc
\end_layout

\begin_layout Plain Layout
COLLECT_LTO_WRAPPER=
\end_layout

\begin_layout Plain Layout
/usr/libexec/gcc/x86_64-pc-linux-gnu/4.9.3/lto-wrapper 
\end_layout

\begin_layout Plain Layout
Target: x86_64-pc-linux-gnu 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Ejercicio 1.
\end_layout

\begin_layout Standard
El codigo que utilizamos es:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void ordenar(int *v, int n){
\end_layout

\begin_layout Plain Layout

   for (int i=0; i<n-1; i++) 
\end_layout

\begin_layout Plain Layout

       for (int j=0; j<n-i-1; j++) 
\end_layout

\begin_layout Plain Layout

            if (v[j]>v[j+1]) { 
\end_layout

\begin_layout Plain Layout

                int aux = v[j];  
\end_layout

\begin_layout Plain Layout

                v[j] = v[j+1]; 
\end_layout

\begin_layout Plain Layout

                v[j+1] = aux; 
\end_layout

\begin_layout Plain Layout

              } 
\end_layout

\begin_layout Plain Layout

 } 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tenemos dos for anidados.
 El orden del if es O(1).
 Dado que en el segundo for tenemos:
\end_layout

\begin_layout Standard
\begin_inset Formula $\sum_{j=0}^{n-i-1}1=n-i$
\end_inset

 , aplicando la regla del producto con el primer for nos queda:
\end_layout

\begin_layout Standard
\begin_inset Formula $\sum_{i=0}^{n-1}n-i=\sum_{i=0}^{n-1}n-\sum_{i=0}^{n-1}i=n\sum_{i=0}^{n-1}1-\sum_{i=0}^{n-1}i=n^{2}-\frac{n^{2}}{2}=(2n^{2}-n^{2})/2=\frac{n^{2}}{2}\in O(n^{2})$
\end_inset


\end_layout

\begin_layout Standard
Es decir, que la eficiencia teórica del algoritmo es del orden de 
\begin_inset Formula $n^{2}$
\end_inset

.
\end_layout

\begin_layout Standard
El fichero ordenación.cpp y el script ejecuciones_ordenacion.csh se encuentran
 en este mismo directorio junto con los gráficos generados y un script más
 para generarlos de nuevo.
\end_layout

\begin_layout Standard
Si se dibujan superpuestas la función de eficiencia teórica y la empírica,
 estas quedan prácticamente superpuestas, lo que indica que la eficiencia
 teórica se ha calculado correctamente (ver grafico1 y grafico2).
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ejercicios1y2/grafico1.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ejercicios1y2/grafico2.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset

Ejercicio2.
\end_layout

\begin_layout Standard
Vamos a calcular los parámetros a, b y c de 
\begin_inset Formula $f(x)=an^{2}+bn+c$
\end_inset

 que serían los reales para la función que representa la eficiencia (teóricament
e habíamos afirmado que era 
\begin_inset Formula $n^{2}$
\end_inset

).
\end_layout

\begin_layout Standard
Con gnuplot escribo:
\end_layout

\begin_layout Itemize
\begin_inset Formula $f(x)=a*x**2+b*x+c$
\end_inset


\end_layout

\begin_layout Itemize
fit 
\begin_inset Formula $f(x)$
\end_inset

 ''tiempos_burbuja'' via a,b,c
\end_layout

\begin_layout Standard
y obtengo:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Formula $a=1.20418e^{-9}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $b=2.19891e^{-7}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $c=0.000441629$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Volvemos a dibujar la función con este ajuste:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ejercicios1y2/grafico3.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset

Ejercicio3.
\end_layout

\begin_layout Standard
Dado el código de ejercicio_desc.cpp:
\end_layout

\begin_layout Itemize
¿qué hace el algoritmo? El algoritmo es el método de busqueda binaria.
 El programa lee unos parámetros de entrada, genera un vector aleatorio
 y calcula el tiempo empleado en ordenar dicho vector con este algoritmo.
 Finalmente imprime en pantalla los resultados.
\end_layout

\begin_layout Itemize
¿cuál es su eficiencia teórica? El mejor caso se presenta cuando el elemento
 buscado está en el centro de la lista.
 En este caso la complejidad es 
\begin_inset Formula $O(1)$
\end_inset

, dado que sólo se realiza una prueba de comparación de la igualdad.
 En el peor cas ola complejidad podría deducirse teniendo en cuenta que
 en cada iteración del bucle while se obtiene un número de elementos 
\begin_inset Formula $\frac{n}{2{}^{i}}$
\end_inset

 donde 
\begin_inset Formula $i$
\end_inset

 es el número de iteraciones; de forma que 
\begin_inset Formula $n/2^{m}=1$
\end_inset

 (m es el total de iteraciones) y, por tanto, 
\begin_inset Formula $2^{m}=n$
\end_inset

, 
\begin_inset Formula $m=log_{2}n$
\end_inset

; por esa razón, la complejidad en el peor de los casos pertenece a 
\begin_inset Formula $O(log_{2}n)$
\end_inset

, es del orden de 
\begin_inset Formula $log_{2}n$
\end_inset

.
\end_layout

\begin_layout Itemize
¿cuál es su eficiencia empírica? La calculamos como en los ejercicios anteriores
 y obtenemos el siguiente gráfico:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Como se puede observar, los valores obtenidos son o 0, o minúsculos y la
 gráfica obtenida no aporta mucha información.
 Para solucionarlo, modifico el códico de ejercicio_desc.cpp para que ejecute
 la búsqueda un determinado número de veces y luego divida el tiempo entre
 dicho número y devuelva ese resultado.
 Finalmente, realizamos el ajuste con: 
\begin_inset Newline newline
\end_inset

gnuplot -e "set terminal png size 1300, 900 ; 
\begin_inset Newline newline
\end_inset

set title 'Tiempo de ejecución - tamaño' ;
\begin_inset Newline newline
\end_inset

 f(x) = a*log(x)/log(2) ; fit f(x) 'tiempos' via a ; 
\begin_inset Newline newline
\end_inset

set output 'grafico2.png' ; 
\begin_inset Newline newline
\end_inset

plot 'tiempos', f(x) with points pointtype 3" 
\begin_inset Newline newline
\end_inset

Obtenemos que a = 6.38588e-09
\begin_inset Newline newline
\end_inset

La gráfica obtenida es: 
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename ejercicio3/grafico_ajuste.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset

Ejercicio 4.
\end_layout

\begin_layout Standard
Simplemente he generado los métodos:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
 void Inicializar_mejor(){
\end_layout

\begin_layout Plain Layout
    for(int i = 0 ; i < total_utilizados ; i++)
\end_layout

\begin_layout Plain Layout
      v[i] = i ;
\end_layout

\begin_layout Plain Layout
  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
   void Inicializar_peor(){
\end_layout

\begin_layout Plain Layout
    for(int i = 0 ; i < total_utilizados ; i++)
\end_layout

\begin_layout Plain Layout
      v[i] = total_utilizados - i ;
\end_layout

\begin_layout Plain Layout
  } 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los resultados obtenidos quedan reflejados en el siguiente gráfico:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ejercicio4/grafico_ambos.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Standard
Como se puede ver, ocurre que en este caso tanto el mejor caso posible como
 el peor caso tiene orden de 
\begin_inset Formula $n^{2}$
\end_inset

, sin embargo, la eficiencia en los mejores casos es mucho mejor que en
 el peor de los casos, lo cual queda reflejado en la gráfica.
\end_layout

\begin_layout Section*
\begin_inset Newpage newpage
\end_inset

Ejercicio 5.
\end_layout

\begin_layout Standard
En este caso, la eficiencia teórica debería ser del orden de n, ya que solo
 se tienen que hacer las n primeras comparaciones.
 
\end_layout

\begin_layout Standard
Es más, dado que solo se hacen n comparaciones la diferencia de tiempos
 entre el mejor y el peor caso se hace tan grande que no se pueden apreciar
 corréctamente en una misma gráfica.
 
\end_layout

\begin_layout Standard
Una comprobación de que el mejor caso tiene una eficiencia del orden de
 
\begin_inset Formula $n$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ejercicio5/grafico_mejor.png
	display false
	scale 30

\end_inset


\end_layout

\end_body
\end_document
